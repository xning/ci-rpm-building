# anzhou94@gmail.com
# requirements:
# krb5-workstation perl-Authen-Krb5

# Take care pls, in bash, 0 is true, and others are false.
# We follow this tradition in the following functions.
# I know you may be very angry about this feature. So, a good way
# is to use the following vars if that make you happy:
# $(true && echo $?)
# $(false || echo $?)
#
# These functions are supposed to run only in bash, thanks.

# How to resolve the re-import problem?
# If I have imported this lib in some place, is that OK we import it
# again?
# Yes, we can resolve this problem. While The bad news is, now this lib
# has a state. It's not stateless. 
(
    function id_this_lib {
        o=$(pwd)
        this_lib=$(caller | tr '\t' ' ' | tr -s ' ' | cut -d ' ' -f 2)
        this_lib_name=$(basename "${this_lib}")
        this_lib_locaiton=$(dirname "${this_lib}")
        cd ${this_lib_locaiton}
        if [ -e ".${this_lib_name}.sha1" ];then
            for f in tgt_config ssh_config koji_config;do
                if eval "${f} > /dev/null 2>&1";then
                    if sha1sum --quiet --status -c ".${this_lib_name}.sha1";then
                        cd ${o} && exit $(true && echo $?)
                    else
                        sha1sum "${this_lib_name}" > ".${this_lib_name}.sha1"
                    fi
                fi
            done
        else
          sha1sum "${this_lib_name}" > ".${this_lib_name}.sha1"  
        fi
        cd ${o}
    }
    id_this_lib
)

#############################
# 1. Functions for kerberos #
#############################

# 3153600000 seconds=100 years
# tgt_config [valid_time [uesr [realm]]]
# tgt_config [valid_time [principal]]
# tgt_config [valid_time [principal [realm]]]
function tgt_config {
   if [ $# -ge 1 -a -n "$1" ];then
       if eval "[ '$1' -gt 0 -a '$1' -le 3153600000 ] > /dev/null 2>&1";then
           export CI_RPM_TGT_VALID_TIME=$1
       elif eval "date -d '$1' +%s > /dev/null 2>&1";then
           curr_time=$(date +%s)
           CI_RPM_TGT_VALID_TIME=$(($(date -d "$1" +%s)-$(date +%s)))
           [ ${curr_time} -gt ${CI_RPM_TGT_VALID_TIME} ] && return $(false || echo $?)
       else
           return $(false || echo $?)
       fi
   fi
   [ $# -ge 2 -a -n "$2" ] && export CI_RPM_TGT_USER="$2"
   if [ $# -ge 3 -a -n "$3" ];then
       ts=$(echo $3 | tr a-z A-Z)
       [ "${ts}" != "$3" ] && return $(false || echo $?)
       export CI_RPM_TGT_REALM="$3"
   fi
   if [ -z "${CI_RPM_TGT_REALM}" -a -n "${CI_RPM_TGT_USER}" ];then
       krb_domain=$(echo "${CI_RPM_TGT_USER}" | cut -s -d '@' -f 2)
       if [ -n "${krb_domain}" ];then
           ts=$(echo ${krb_domain} | tr a-z A-Z)
           [ "${ts}" != "${krb_domain}" ] && return $(false || echo $?)
           CI_RPM_TGT_REALM="${krb_domain}"
       fi
   fi
   export CI_RPM_TGT_VALID_TIME=${CI_RPM_TGT_VALID_TIME:-300}
   export CI_RPM_TGT_USER=${CI_RPM_TGT_USER:-${USER}}
   export CI_RPM_TGT_REALM=${CI_RPM_TGT_REALM:-$(get_krb5_default_realm)}
   echo "${CI_RPM_TGT_USER}:${CI_RPM_TGT_VALID_TIME}:${CI_RPM_TGT_REALM}"
}

# Accept string as argument and check whether the string is like this:
#                  user_name@kerb_real
# is_krb5_full_principal string
function is_krb5_full_principal {
    (
        LANG=C
        [ $# -lt 1 -o -z "$1" ] && return $(false || echo $?)
        krb_domain=$(echo "$1" | cut -s -d '@' -f 2)
        ts=$(echo ${krb_domain} | tr a-z A-Z)
        [ -z "${krb_domain}" -o "${ts}" != "${krb_domain}" ] && return $(false || echo $?)
        return $(true && echo $?)
    )
}

function get_krb5_default_realm {
    LANG=C perl -E 'use Authen::Krb5;Authen::Krb5::init_context();say Authen::Krb5::get_default_realm()'
}

# get_krb5_cache_file_name [user_name]
# get_krb5_cache_file_name [kerb_full_principal]
function get_krb5_cache_file_name {
    (
        LANG=C
        [ $# -ge 1 -a -n "$1" ] && user="$1"
        [ -z "${user:-}" -a -n "${CI_RPM_TGT_USER}" ] && user="${CI_RPM_TGT_USER}"
        if ! is_krb5_full_principal "${user:-${USER}}";then
            if [ -z "${CI_RPM_TGT_REALM}" ];then
                user="${user:-${USER}}@$(get_krb5_default_realm)"
            else
                user="${user:-${USER}}@${CI_RPM_TGT_REALM}"
            fi
            is_krb5_full_principal "${user}" || return $(false || echo $?)
        fi
        escape_user=$(echo "${user}" | sed 's/\./\\\./' -)
        klist -l | grep -q -e "^${escape_user} \+" || return $(false || echo $?)
        # On Fedora 16, klist no -l option.
        # On Fedora 17, 18, 19, klist -l gives out such like:
        #     Principal name                 Cache name
        #     --------------                 ----------
        #     anzhou94@REALM                 DIR::/tmp/krb5cc_1000
        if eval 'klist -l > /dev/null 2>&1';then
            s=$(klist -l | grep -e "^${escape_user} \+")
            if echo $s | grep -q 'FILE:';then
                cache_file=$(echo $s | cut -s -d ':' -f 2 | sed 's/ (Expired)$//')
            elif echo $s | grep -q 'DIR::';then
                cache_file=$(echo $s | cut -s -d ':' -f 3 | sed 's/ (Expired)$//')
            else
                cache_file=''
            fi
        else
            cache_file=$(klist | grep -e '^Ticket cache: ' | cut -d ':' -f 3 | sed 's/ (Expired)$//')
        fi
        [ -z "${cache_file}" ] && return $(false || echo $?)
        echo $cache_file
        return $(true && echo $?)
    )
}

# is_tgt_forwardable [user_name]
# is_tgt_forwardable [kerb_full_principal]
function is_tgt_forwardable {
    (
        LANG=C
        [ $# -ge 1 -a -n "$1" ] && user="$1"
        [ -z "${user}" -a -n "${CI_RPM_TGT_USER}" ] && user="${CI_RPM_TGT_USER}"
        if ! is_krb5_full_principal "${user:-${USER}}";then
            if [ -z "${CI_RPM_TGT_REALM}" ];then
                user="${user:-${USER}}@$(get_krb5_default_realm)"
            else
                user="${user:-${USER}}@${CI_RPM_TGT_REALM}"
            fi
            is_krb5_full_principal "${user}" || return $(false || echo $?)
        fi
        cache_file=$(get_krb5_cache_file_name "${user}")
        [ -z "${cache_file}" ] && return $(false || echo $?)
        klist -f ${cache_file} | grep -A 2 'krbtgt/' | head -2 | grep 'Flags:' | sed 's/^.*Flags: \+\(.*\)$/\1/' | grep -q F || return $(false || echo $?)
        return $(true && echo $?)
    )
}

# is_tgt_valid_after 1st argument could accept time literals and seconds numbers
# as its 1st arguments. The time literals will translate to a UTC time by GNU date
# command.
#
# GNU date command -d option could accept. F.g.,
# 1 day, 2 hour, 30 minute, etc.
# Pls try the following commands if you like:
# date -d '1 hour'
#
# is_tgt_valid_after
# is_tgt_valid_after [seconds [user_name]]
# is_tgt_valid_after [seconds [kerb_full_principal]]
# is_tgt_valid_after [time_literal [user_name]]
# is_tgt_valid_after [time_literal [kerb_full_principal]]
# F.g.
# is_tgt_valid_after '2 hour'
# Notice here CI_RPM_TGT_VALID_TIME is always the time interval after
# current time.
# 3153600000 seconds=100 years
function is_tgt_valid_after {
    (
        LANG=C
        if [ -n "${CI_RPM_TGT_VALID_TIME}" ];then
            if eval "[ '${CI_RPM_TGT_VALID_TIME}' -ge 0 -a '${CI_RPM_TGT_VALID_TIME}' -le 3153600000 ] > /dev/null 2>&1";then
                valid_time=${CI_RPM_TGT_VALID_TIME}
            elif eval "date -d '${CI_RPM_TGT_VALID_TIME}' +%s > /dev/null 2>&1";then
                curr_time=$(date +%s)
                expect_time=$(date -d "${CI_RPM_TGT_VALID_TIME}" +%s)
                [ ${curr_time} -ge ${expect_time} ] && return $(false || echo $?)
            else
                return $(false || echo $?)
            fi
        fi
        if [ $# -ge 1 -a -n "$1" ];then
            if eval "[ '$1' -gt 0 -a '$1' -le 3153600000 ] > /dev/null 2>&1";then
                valid_time=$1
            elif eval "date -d '$1' +%s > /dev/null 2>&1";then
                curr_time=$(date +%s)
                expect_time=$(date -d "$1" +%s)
                [ ${curr_time} -ge ${expect_time} ] && return $(false || echo $?)
            fi
        fi
        [ $# -ge 1 -a -n "$2" ] && user="$2"
        [ -z "${user}" -a -n "${CI_RPM_TGT_USER}" ] && user="${CI_RPM_TGT_USER}"
        if ! is_krb5_full_principal "${user:-${USER}}";then
            if [ -z "${CI_RPM_TGT_REALM}" ];then
                user="${user:-${USER}}@$(get_krb5_default_realm)"
            else
                user="${user:-${USER}}@${CI_RPM_TGT_REALM}"
            fi
            is_krb5_full_principal "${user}" || return $(false || echo $?)
        fi
        cache_file=$(get_krb5_cache_file_name "${user}")
        [ -z "${cache_file}" ] && return $(false || echo $?)
        expire_time=$(date -d "$(LC_TIME=C klist ${cache_file} | grep 'krbtgt/' | head -1 | sed 's/ \+/ /g' | cut -s -d ' ' -f 3-4)" +"%s")
        eval "[ 0 -lt '${expire_time}' ] >/dev/null 2>&1" || return $(false || echo $?)
        [ ${expect_time:-0} -eq 0 ] && expect_time=$(date -d "${valid_time:-300} seconds" +"%s")
        [ ${expire_time} -gt ${expect_time} ] && return $(true && echo $?)
        return $(false || echo $?)
    )
}

# Accept kerb principle or user name as principle.
# If no argument, the function will use env USER.
# If no realm gaven, will use the defalut realm.
# The ticket's expire time should be long than 300s
# is_tgt_ok
# is_tgt_ok [valid_time [user_name]]
# is_tgt_ok [valid_time [kerb_full_principal]]
# is_tgt_ok [time_literal [user_name]]
# is_tgt_ok [time_literal [kerb_full_principal]]
# F.g.
# is_tgt_ok '2 hour'
# Notice here CI_RPM_TGT_VALID_TIME is always the time interval after
# current time.
# 3153600000 seconds=100 years
function is_tgt_ok {
    (
        LANG=C
        if [ -n "${CI_RPM_TGT_VALID_TIME}" ];then
            if eval "[ '${CI_RPM_TGT_VALID_TIME}' -ge 0 -a '${CI_RPM_TGT_VALID_TIME}' -le 3153600000 ] > /dev/null 2>&1";then
                valid_time=${CI_RPM_TGT_VALID_TIME}
            elif eval "date -d '${CI_RPM_TGT_VALID_TIME}' +%s > /dev/null 2>&1";then
                curr_time=$(date +%s)
                expect_time=$(date -d "${CI_RPM_TGT_VALID_TIME}" +%s)
                [ ${curr_time} -ge ${expect_time} ] && return $(false || echo $?)
                valid_time=$(($(date -d "${CI_RPM_TGT_VALID_TIME}" +%s)-$(date +%s)))
            else
                return $(false || echo $?)
            fi
        fi
        if [ $# -ge 1 -a -n "$1" ];then
            if eval "[ '$1' -gt 0 -a '$1' -le 3153600000 ] > /dev/null 2>&1";then
                valid_time=$1
            elif eval "date -d '$1' +%s > /dev/null 2>&1";then
                curr_time=$(date +%s)
                expect_time=$(date -d "$1" +%s)
                [ ${curr_time} -ge ${expect_time} ] && return $(false || echo $?)
                valid_time=$((${expect_time}-$(date +%s)))
            else
                return $(false || echo $?)
            fi
        fi
        [ $# -ge 2 -a -n "$2" ] && user="$2"
        [ -z "${user:-}" -a -n "${CI_RPM_TGT_USER}" ] && user="${CI_RPM_TGT_USER}"
        if ! is_krb5_full_principal "${user:-${USER}}";then
            if [ -z "${CI_RPM_TGT_REALM}" ];then
                user="${user:-${USER}}@$(get_krb5_default_realm)"
            else
                user="${user:-${USER}}@${CI_RPM_TGT_REALM}"
            fi
            is_krb5_full_principal "${user}" || return $(false || echo $?)
        fi
        is_tgt_forwardable "${user}" || return $(false || echo $?)
        is_tgt_valid_after "${valid_time:-300}" "${user}" || return $(false || echo $?)
        return $(true && echo $?)
    )
}

#############################
# 2. Functions for sftp/ssh #
#############################

# We expect you can always tell us where (the host)
# who (the user) and the workspace (work dir) when
# we sftp/ssh a server. So, we always begin at the determined
# position.
# When you first login in a ssh server, you will be asked to accept
# the server key or not. It's most possible that your ssh
# client will store the ssh server key as hash, while we don't make
# sure about this. So if need, pls tell us this by ssh_config
# if need. Default we store the hashed ssh server key.
# F.g.,
# ssh_config 192.168.11.231 anzhou94 '/home/anzhou94/'
# ssh_config [server [user [workdir [hash_known_host]]]]
function ssh_config {
    [ $# -ge 1 -a -n "$1" ] && CI_RPM_SSH_SERVER=$1
    [ $# -ge 2 -a -n "$2" ] && CI_RPM_SSH_USER=$2
    [ $# -ge 3 -a -n "$3" ] && CI_RPM_SSH_WORK_DIR=$3
    if [ $# -ge 4 ];then
        if eval "[ 0 -le '$4' -o 0 -gt '$4' ] > /dev/null 2>&1";then
            [ -n "$4" ] && CI_RPM_SSH_HASH_KNOWN_HOSTS=$4
        else
            return $(false || echo $?)
        fi
    fi
    export CI_RPM_SSH_SERVER=${CI_RPM_SSH_SERVER:-localhost}
    export CI_RPM_SSH_USER=${CI_RPM_SSH_USER:-${USER}}
    export CI_RPM_SSH_WORK_DIR=${CI_RPM_SSH_WORK_DIR:-}
    export CI_RPM_SSH_HASH_KNOWN_HOSTS=${CI_RPM_SSH_HASH_KNOWN_HOSTS:-$(true && echo $?)}
    echo "${CI_RPM_SSH_SERVER}:${CI_RPM_SSH_USER}:${CI_RPM_SSH_WORK_DIR}:${CI_RPM_SSH_HASH_KNOWN_HOSTS}"
}

# Will automatically import ssh server key and try login in.
# It's better to check the ssh server before we use it.
function is_ssh_ok {
    (
        LANG=C
        if eval "[ '${CI_RPM_SSH_HASH_KNOWN_HOSTS:-0}' -le 0 -o '${CI_RPM_SSH_HASH_KNOWN_HOSTS:-0}' -gt 0 ] > /dev/null 2>&1";then
            [ ${CI_RPM_SSH_HASH_KNOWN_HOSTS:-0} -eq 0 ] && opt='-H' || opt=''
        else
            return $(false || echo $?)
        fi
        ssh-keygen -q -F ${CI_RPM_SSH_SERVER:-localhost} > /dev/null 2>&1 || ssh-keyscan ${opt} ${CI_RPM_SSH_SERVER:-localhost} >> ~/.ssh/known_hosts 2>/dev/null
        ssh -oPasswordAuthentication=no -K ${CI_RPM_SSH_USER:-${USER}}@${CI_RPM_SSH_SERVER:-localhost} ':' > /dev/null 2> /dev/null
    )
}

# ssh_upload [file1 [file2 [...]]]
function ssh_upload {
    (
        LANG=C
        t=$(mktemp)
        [ -n "${CI_RPM_SSH_WORK_DIR:-}" -a "${CI_RPM_SSH_WORK_DIR:-}" != '~' ] && echo "cd '${CI_RPM_SSH_WORK_DIR}'" > $t
        for f in "$@";do [ -n "$f" ] && echo "put '$f'" >> $t;done
        sftp -oPasswordAuthentication=no -oGSSAPIAuthentication=yes -b $t ${CI_RPM_SSH_USER:-${USER}}@${CI_RPM_SSH_SERVER:-localhost}
        ret=$?
        rm -f $t
        return ${ret}
    )
}

# ssh_download [file1 [file2 [...]]]
function ssh_download {
    (
        LANG=C
        t=$(mktemp)
        [ -n "${CI_RPM_SSH_WORK_DIR:-}" -a "${CI_RPM_SSH_WORK_DIR:-}" != '~' ] && echo "cd '${CI_RPM_SSH_WORK_DIR}'" > $t
        for f in "$@";do [ -n "$f" ] && echo "get '$f'" >> $t;done
        sftp -oPasswordAuthentication=no -oGSSAPIAuthentication=yes -b $t ${CI_RPM_SSH_USER:-${USER}}@${CI_RPM_SSH_SERVER:-localhost}
        ret=$?
        rm -f $t
        return ${ret}
    )
}

# These cmds will be run in the same shell
# ssh_exec [cmd1 [cmd2 [...]]]
function ssh_exec {
    (
        LANG=C
        for c in "$@";do { [ -z "$s" -a -n "$c" ] && s=$c; } || { [ -n "$c" ] && s="$s;$c"; } done
        [ -n "${CI_RPM_SSH_WORK_DIR:-}" -a "${CI_RPM_SSH_WORK_DIR:-}" != '~' ] && s="cd '${CI_RPM_SSH_WORK_DIR}';$s"
        ssh -oPasswordAuthentication=no -K ${CI_RPM_SSH_USER:-${USER}}@${CI_RPM_SSH_SERVER:-localhost} "$s"
    )
}

#########################
# 3. Functions for koji #
#########################

# If need set tag for the following koji functions,
# pls use the koji_config function like this:
# Default tag is eng-rhel-6. This default action works well
# even you don't run koji_config function first.
# NOTICE: you could setup how 'new' RPMs that you're interested in
# by ssh_config.
# We use GNU date command -d option to covert the time that your input.
# Default value is 1 week.
# Some date examples:
# date +%s -d '-1 day'
# date +%s -d '-1 hour'
# You can also use 'second, minute, week, month, and year'.
# Notice here CI_RPM_KOJI_RPM_HOW_NEW is always the time interval after
# current time.
# 3153600000 seconds=100 years
# Surely, you can export CI_RPM_KOJI_RPM_HOW_NEW youself.
# koji_config [build_tag [presult_tag [raw_data [how_new]]]] 
function koji_config {
    [ $# -ge 1 -a -n "$1" ] && CI_RPM_KOJI_BUILD_TAG="$1"
    [ $# -ge 2 -a -n "$2" ] && CI_RPM_KOJI_RESULT_TAG="$2"
    if [ $# -ge 3 -a -n "$3" ];then
        eval "[ '$3' -eq $(true && echo $?) -o '$3' -eq $(false || echo $?) ] > /dev/null 2>&1" || return $(false || echo $?)
        CI_RPM_KOJI_RAW="$3"
    fi
    CI_RPM_KOJI_RPM_HOW_NEW='-1 week'
    if [ $# -ge 4 -a -n "$4" ];then
        if eval "[ '$4' -le 3153600000 -o '$4' -gt -3153600000 ] > /dev/null 2>&1";then
            if [ '$4' -ge 0 ];then
                CI_RPM_KOJI_RPM_HOW_NEW=$((0-$4))
            else
                CI_RPM_KOJI_RPM_HOW_NEW=$4
            fi
        else
            eval "date -d '$4' +%s > /dev/null 2>&1" || return $(false || echo $?)
            curr_time=$(date +%s)
            CI_RPM_KOJI_RPM_HOW_NEW=$(date -d "$4" +%s)
            if [ ${curr_time} -le ${CI_RPM_KOJI_RPM_HOW_NEW} ];then
                CI_RPM_KOJI_RPM_HOW_NEW=$((${curr_time}-${CI_RPM_KOJI_RPM_HOW_NEW}))
            else
                CI_RPM_KOJI_RPM_HOW_NEW=$((${CI_RPM_KOJI_RPM_HOW_NEW}-${curr_time}))
            fi
        fi
    fi
    export CI_RPM_KOJI_BUILD_TAG=${CI_RPM_KOJI_BUILD_TAG:-eng-rhel-6}
    export CI_RPM_KOJI_RESULT_TAG=${CI_RPM_KOJI_RESULT_TAG:-eng-rhel-6-candidate}
    export CI_RPM_KOJI_RAW=${CI_RPM_KOJI_RAW:-$(false || echo $?)}
    export CI_RPM_KOJI_RPM_HOW_NEW=${CI_RPM_KOJI_RPM_HOW_NEW:-'-1 week'}
    echo ${CI_RPM_KOJI_BUILD_TAG}:${CI_RPM_KOJI_RESULT_TAG}:${CI_RPM_KOJI_RAW}:${CI_RPM_KOJI_RPM_HOW_NEW}
}

function have_koji_to_login {
    LANG=C koji moshimoshi > /dev/null 2> /dev/null
}

# get_pkgs_owned_by [user [pkg]]
function get_pkgs_owned_by {
    (
        LANG=C
        [ $# -ge 1 -a -n "$1" ] && user="$1"
        [ $# -ge 2 -a -n "$2" ] && pkg="--package='$2'"
        if [ "x${pkg:-}" != 'x' ];then
            koji list-pkgs --quiet --owner="${user:-${USER}}" "${pkg}" --tag "${CI_RPM_KOJI_BUILD_TAG:-eng-rhel-6}" 2>/dev/null | cut -s -d ' ' -f 1
        else
            koji list-pkgs --quiet --owner="${user:-${USER}}" --tag "${CI_RPM_KOJI_BUILD_TAG:-eng-rhel-6}" 2>/dev/null | cut -s -d ' ' -f 1
        fi
    )
}

# get_rpm_from_pkg pkg
function get_rpm_from_pkg {
    (
        LANG=C
        [ $# -eq 1 -a -n "$1" ] || return $(false || echo $?)
        eval "[ 0 -le '${CI_RPM_KOJI_RAW:-$(false || echo $?)}' -o 0 -gt '${CI_RPM_KOJI_RAW:-$(false || echo $?)}' ] > /dev/null 2>&1" || return $(false || echo $?)
        s=$(koji list-tagged --quiet --paths --rpms "${CI_RPM_KOJI_RESULT_TAG:-eng-rhel-6-candidate}" "$1")
        if [ ${CI_RPM_KOJI_RAW:-$(false || echo $?)} -eq $(false || echo $?) ];then
            echo "$s" | awk -F '/' '{print $NF}' | grep -e '^/' -e '\.rpm$' | tac
        else
            echo "$s" | grep -e '\.rpm$' | tac
        fi
    )
}

# This function will output such infos
#     build_id:task_id:rpm_owner:built_time
# The built_time is UTC time. You can display it as locale time as follows
#         date -d @1369623600
# And sure it's simple to get current UTC time:
#         date +%s
# For more about GNU date command, pls reference the README.md file, or reference
# following resources
# https://github.com/xning/ci-rpm-building
# info coreutils date
# get_rpm_info_idx rpm
function get_rpm_info_idx {
    (
        LANG=C
        [ $# -eq 1 -a -n "$1" ] || return $(false || echo $?)
        s=$(koji rpminfo "$1" || return $(false || echo $?))
        [ -n "$s" ] || return $(false || echo $?)
        build_id=$(echo "$s" | grep -e '^Build ID: ' | cut -s -d ':' -f 2 | sed -e 's/^\s*//' | cut -d ' ' -f 1)
        task_id=$(echo "$s" | grep -e '^Build Task: ' | cut -s -d ':' -f 2 | sed -e 's/^\s*//' | cut -d ' ' -f 1)
        built_time="$(echo "$s" | grep -e '^Built: ' | cut -s -d ':' -f 2 | sed -e 's/^\s*//' -e 's/\s*$//')"
        built_time_utc=$(date +%s -d "${built_time}")
        [ -n "${build_id}" -a -n "${task_id}" -a -n "${built_time}" ] || return $(false || echo $?)
        for num in "${build_id}" "${task_id}" "${built_time_utc}";do
            eval "[ 0 -le '${num}' -o 0 -gt '${num}' ] > /dev/null 2>&1" || return $(false || echo $?)
        done
        s=$(koji buildinfo ${build_id})
        rpm_owner=$(echo "$s" | grep -e 'Built by: ' | cut -s -d ':' -f 2 |  sed -e 's/^\s*//' | cut -d ' ' -f 1)
        [ -n "${rpm_owner}" ] || return $(false || echo $?)
        eval "[ $(true && echo $?) -eq '${CI_RPM_KOJI_RAW:-$(false || echo $?)}' -o $(false || echo $?) -eq '${CI_RPM_KOJI_RAW:-$(false || echo $?)}' ] > /dev/null 2>&1" || return $(false || echo $?)
        [ ${CI_RPM_KOJI_RAW:-$(false || echo $?)} -eq $(false || echo $?) ] && built_time=${built_time_utc}
        echo "${build_id}:${task_id}:${rpm_owner}:${built_time}"
    )
}

# 3153600000 seconds=100 years
# This function will output such infos
#     pkg_name:build_id:task_id:rpm_owner:built_time
# get_pkgs_info_idx pkg1 [pkg2 [...]]
function get_pkgs_info_idx {
    (
        LANG=C
        [ $# -ge 1 -a -n "$1" ] || return $(false || echo $?)
        if [ -n "${CI_RPM_KOJI_RPM_HOW_NEW}" ];then
            curr_time=$(date +%s)
            if eval "[ '${CI_RPM_KOJI_RPM_HOW_NEW}' -le 3153600000 -o '${CI_RPM_KOJI_RPM_HOW_NEW}' -gt -3153600000 ] > /dev/null 2>&1";then
                expect_time=$(date -d "${CI_RPM_KOJI_RPM_HOW_NEW} seconds" +%s)
            else
                eval "date -d '${CI_RPM_KOJI_RPM_HOW_NEW}' +%s > /dev/null 2>&1" || return $(false || echo $?)
                expect_time=$(date -d "${CI_RPM_KOJI_RPM_HOW_NEW}" +%s)
            fi
            if [ ${curr_time} -le ${expect_time} ];then
                expect_time=$(date -d "$((0-$((${expect_time}-${curr_time})))) seconds" +%s)
            fi
        fi
        [ ${expect_time:-0} -eq 0 ] && expect_time=$(date -d '-1 week' +%s)
        o=$(pwd)
        t=$(mktemp -d)
        cd $t
        for pkg in "$@";do
            rm -rf *
            touch tmp_all_rpms_paths
            (
                export CI_RPM_KOJI_RAW=$(true && echo $?)
                get_rpm_from_pkg ${pkg} > all_rpms_paths
            )
            for rpm_path in $(cat all_rpms_paths);do
                rpm_path_regex=$(echo ${rpm_path} | sed -e 's/\./\\\./g')
                grep -q -e "^${rpm_path_regex}\$" tmp_all_rpms_paths && continue 1
                rpm=$(echo ${rpm_path} | awk -F '/' '{print $NF}')
                s=$(get_rpm_info_idx $rpm)
                built_time=$(echo $s | cut -s -d ':' -f 4)
                [ ${expect_time:-0} -le ${built_time} ] || continue 2
                build_id=$(echo $s | cut -s -d ':' -f 1)
                [ -n "${build_id}" ] || return $(false || echo $?) 
                koji buildinfo ${build_id} | grep -e '^/' -e '\.rpm$' >> tmp_all_rpms_paths
                echo $pkg:$s
            done
        done
        cd $o
        rm -rf $t
        return $(true && echo $?)
    )
}
