# anzhou94@gmail.com
# requirements:
# krb5-workstation perl-Authen-Krb5

T=0 # True
F=1 # False
LANG=C # To make no trouble, we only use English

# Here, the most important argument for these functions is
# the user name.

# Common functions
function wait_a_while {
    sleep 3
}

function get_current_user_name {
    id -u -n
}

# Functions for kerberos

# Accept kerb principle as argument
# F.g., is_krb5_full_principal "anzhou94@DOMAIN.COM"
function is_krb5_full_principal {
    (
        T=0 # True
        F=1 # False
        LANG=C
        [ $# -lt 1 ] && return ${F:-1}
        krb_domain=$(echo "$1" | cut -s -d '@' -f 2)
        [ -z "${krb_domain}" ] && return ${F:-1}
        return ${T:-0}
    )
}

function get_krb5_default_realm {
    perl -E 'use Authen::Krb5;Authen::Krb5::init_context();say Authen::Krb5::get_default_realm()'
}

function get_krb5_cache_file_name {
    (
        T=0 # True
        F=1 # False
        LANG=C
        if [ $# -ge 1 ];then
            user="$1"
        else
            user=$(get_current_user_name)
        fi
        is_krb5_full_principal "${user}" || user="${user}@$(get_krb5_default_realm)"
        is_krb5_full_principal "${user}" || return ${F:-1}
        escape_user=$(echo "$user" | sed 's/\./\\\./' -)
        klist -l | grep -q -e "^${escape_user} \+" || return ${F:-1}
        cache_file=$(klist -l | grep -e "^${escape_user} \+" | cut -s -d ':' -f 2)
        [ -z "${cache_file}" ] && return ${F:-1}
        echo $cache_file
        return ${T:-0}
    )
}

function is_tgt_forwardable {
    (
        T=0 # True
        F=1 # False
        LANG=C
        valid_time=300
        if [ $# -ge 1 ];then
            user="$1"
        else
            user=$(get_current_user_name)
        fi
        is_krb5_full_principal "${user}" || user="${user}@$(get_krb5_default_realm)"
        is_krb5_full_principal "${user}" || return ${F:-1}
        cache_file=$(get_krb5_cache_file_name "${user}")
        [ -z "${cache_file}" ] && return ${F:-1}
        klist -f ${cache_file} | grep -A 2 'krbtgt/' | head -2 | grep 'Flags:' | sed 's/^.*Flags: \+\(.*\)$/\1/' | grep -q F || return ${F:-1}
        return ${T:-1}
    )

}

# is_tgt_valid_after user_name 3600
function is_tgt_vaild_after {
    (
        T=0 # True
        F=1 # False
        LANG=C
        valid_time=300
        interval=15
        if [ $# -ge 1 ] && [ -n "$1" ];then
            user="$1"
        else
            user=$(get_current_user_name)
        fi
        [ $# -ge 2 ] && [ -n "$2" ] && valid_time=$2 && valid_time=$((valid_time+$interval))
        is_krb5_full_principal "${user}" || user="${user}@$(get_krb5_default_realm)"
        is_krb5_full_principal "${user}" || return ${F:-1}
        cache_file=$(get_krb5_cache_file_name "${user}")
        [ -z "${cache_file}" ] && return ${F:-1}
        expire_time=$(date -d "$(LC_TIME=C klist ${cache_file} | grep 'krbtgt/' | head -1 | sed 's/ \+/ /g' | cut -s -d ' ' -f 3-4)" +"%s")
        current_time=$(date +"%s") && current_time=$((current_time+${valid_time}))
        [ ${expire_time} -gt ${current_time} ] && return ${T:-0}
        return ${F:-1}
    )
}

# Accept kerb principle or user name as principle.
# If no argument, the function will use env USER.
# If no realm gaven, will use the defalut realm.
# The ticket's expire time should be long than 300s
function is_tgt_ok {
    (
        T=0 # True
        F=1 # False
        LANG=C
        valid_time=300
        if [ $# -ge 1 ];then
            user="$1"
        else
            user=$(get_current_user_name)
        fi
        is_krb5_full_principal "${user}" || user="${user}@$(get_krb5_default_realm)"
        is_krb5_full_principal "${user}" || return ${F:-1}
        is_tgt_forwardable "${user}" || return ${F:-1}
        is_tgt_vaild_after "${user}" ${valid_time} || return ${F:-1}
        return ${T:-1}
    )
}

# Functions for sftp

# We expect you can always tell us where (the host)
# who (the user) and the workspace (the dir) when
# we sftp/ssh a server
# So, we always begin at a known place
# F.g., ssh_config 192.168.11.231 anzhou94 '/home/anzhou94/'
function ssh_config {
    [ $# -lt 1 ] && return 1
    CI_RPM_BUILD_USER=$(get_current_user_name)
    export CI_RPM_BUILD_DIR='/tmp'
    export CI_RPM_BUILD_USER
    [ $# -ge 1 ] && export CI_RPM_BUILD_HOST=$1
    [ $# -ge 2 ] && [ -n "$2" ] && export CI_RPM_BUILD_USER=$2
    [ $# -ge 3 ] && [ -n "$3" ] && export CI_RPM_BUILD_DIR=$3
    echo "${CI_RPM_BUILD_HOST}:${CI_RPM_BUILD_USER}:${CI_RPM_BUILD_DIR}"
    return 0
}

function is_ssh_ok {
    (
        LANG=C
        ssh -K ${CI_RPM_BUILD_USER}@${CI_RPM_BUILD_HOST} ':' > /dev/null 2> /dev/null
    )
}

function ssh_upload {
    (
        LANG=C
        t=$(mktemp)
        echo "cd ${CI_RPM_BUILD_DIR}" > $t
        for f in "$@";do echo "put '$f'" >> $t;done
        sftp -oGSSAPIAuthentication=yes -b $t ${CI_RPM_BUILD_USER}@${CI_RPM_BUILD_HOST}
        ret=$?
        rm -f $t
        return ${ret}
    )
}

function ssh_download {
    (
        LANG=C
        t=$(mktemp)
        echo "cd ${CI_RPM_BUILD_DIR}" > $t
        for f in "$@";do echo "get '$f'" >> $t;done
        sftp -oGSSAPIAuthentication=yes -b $t ${CI_RPM_BUILD_USER}@${CI_RPM_BUILD_HOST}
        ret=$?
        rm -f $t
        return ${ret}
    )
}

function ssh_exec {
    (
        LANG=C
        for c in "$@";do [ -z "$s" ] && s=$c || s="$s;$c";done
        ssh -K ${CI_RPM_BUILD_USER}@${CI_RPM_BUILD_HOST} "cd '${CI_RPM_BUILD_DIR}';$s"
    )
}

# Functions for koji

function have_koji_to_login {
    koji moshimoshi > /dev/null 2> /dev/null
}

function get_pkgs_owned_by {
    (
        T=0 # True
        F=1 # False
        LANG=C
        if [ $# -ge 1 ];then
            user="$1"
        else
            user=$(get_current_user_name)
        fi
        koji list-pkgs --quiet --owner=${user} 2>/dev/null | cut -s -d ' ' -f 1
    )
}

# get_latest_rpms tag pkg1 [pkg]
function get_latest_rpms {
    (
        T=0 # True
        F=1 # False
        LANG=C
        [ $# -lt 2 ] && return ${F:-1}
        tag="$1" && shift
        koji latest-build --quiet ${tag} "$@" 2> /dev/null | cut -s -d ' ' -f 1
    )
}


function download_latest_rpms {
    (
        T=0 # True
        F=1 # False
        LANG=C
        [ $# -lt 1 ] && return ${F:-1}
        for rpm in "$@";do
            koji download-build --debuginfo ${rpm}
        done
    )
}
